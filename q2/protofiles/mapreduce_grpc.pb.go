// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protofiles/mapreduce.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkerService_MapRPC_FullMethodName    = "/mapreduce.WorkerService/MapRPC"
	WorkerService_ReduceRPC_FullMethodName = "/mapreduce.WorkerService/ReduceRPC"
	WorkerService_ExitRPC_FullMethodName   = "/mapreduce.WorkerService/ExitRPC"
)

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	MapRPC(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*MapResponse, error)
	ReduceRPC(ctx context.Context, in *ReduceRequest, opts ...grpc.CallOption) (*ReduceResponse, error)
	ExitRPC(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*ExitResponse, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) MapRPC(ctx context.Context, in *MapRequest, opts ...grpc.CallOption) (*MapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapResponse)
	err := c.cc.Invoke(ctx, WorkerService_MapRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) ReduceRPC(ctx context.Context, in *ReduceRequest, opts ...grpc.CallOption) (*ReduceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReduceResponse)
	err := c.cc.Invoke(ctx, WorkerService_ReduceRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) ExitRPC(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*ExitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitResponse)
	err := c.cc.Invoke(ctx, WorkerService_ExitRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility.
type WorkerServiceServer interface {
	MapRPC(context.Context, *MapRequest) (*MapResponse, error)
	ReduceRPC(context.Context, *ReduceRequest) (*ReduceResponse, error)
	ExitRPC(context.Context, *ExitRequest) (*ExitResponse, error)
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkerServiceServer struct{}

func (UnimplementedWorkerServiceServer) MapRPC(context.Context, *MapRequest) (*MapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapRPC not implemented")
}
func (UnimplementedWorkerServiceServer) ReduceRPC(context.Context, *ReduceRequest) (*ReduceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceRPC not implemented")
}
func (UnimplementedWorkerServiceServer) ExitRPC(context.Context, *ExitRequest) (*ExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitRPC not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}
func (UnimplementedWorkerServiceServer) testEmbeddedByValue()                       {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_MapRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).MapRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_MapRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).MapRPC(ctx, req.(*MapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_ReduceRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).ReduceRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_ReduceRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).ReduceRPC(ctx, req.(*ReduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_ExitRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).ExitRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_ExitRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).ExitRPC(ctx, req.(*ExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mapreduce.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapRPC",
			Handler:    _WorkerService_MapRPC_Handler,
		},
		{
			MethodName: "ReduceRPC",
			Handler:    _WorkerService_ReduceRPC_Handler,
		},
		{
			MethodName: "ExitRPC",
			Handler:    _WorkerService_ExitRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/mapreduce.proto",
}

const (
	SubmitResultService_MapResultRPC_FullMethodName    = "/mapreduce.SubmitResultService/MapResultRPC"
	SubmitResultService_ReduceResultRPC_FullMethodName = "/mapreduce.SubmitResultService/ReduceResultRPC"
)

// SubmitResultServiceClient is the client API for SubmitResultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmitResultServiceClient interface {
	MapResultRPC(ctx context.Context, in *MapResult, opts ...grpc.CallOption) (*MapResultResponse, error)
	ReduceResultRPC(ctx context.Context, in *ReduceResult, opts ...grpc.CallOption) (*ReduceResultResponse, error)
}

type submitResultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmitResultServiceClient(cc grpc.ClientConnInterface) SubmitResultServiceClient {
	return &submitResultServiceClient{cc}
}

func (c *submitResultServiceClient) MapResultRPC(ctx context.Context, in *MapResult, opts ...grpc.CallOption) (*MapResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MapResultResponse)
	err := c.cc.Invoke(ctx, SubmitResultService_MapResultRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submitResultServiceClient) ReduceResultRPC(ctx context.Context, in *ReduceResult, opts ...grpc.CallOption) (*ReduceResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReduceResultResponse)
	err := c.cc.Invoke(ctx, SubmitResultService_ReduceResultRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmitResultServiceServer is the server API for SubmitResultService service.
// All implementations must embed UnimplementedSubmitResultServiceServer
// for forward compatibility.
type SubmitResultServiceServer interface {
	MapResultRPC(context.Context, *MapResult) (*MapResultResponse, error)
	ReduceResultRPC(context.Context, *ReduceResult) (*ReduceResultResponse, error)
	mustEmbedUnimplementedSubmitResultServiceServer()
}

// UnimplementedSubmitResultServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubmitResultServiceServer struct{}

func (UnimplementedSubmitResultServiceServer) MapResultRPC(context.Context, *MapResult) (*MapResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapResultRPC not implemented")
}
func (UnimplementedSubmitResultServiceServer) ReduceResultRPC(context.Context, *ReduceResult) (*ReduceResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceResultRPC not implemented")
}
func (UnimplementedSubmitResultServiceServer) mustEmbedUnimplementedSubmitResultServiceServer() {}
func (UnimplementedSubmitResultServiceServer) testEmbeddedByValue()                             {}

// UnsafeSubmitResultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmitResultServiceServer will
// result in compilation errors.
type UnsafeSubmitResultServiceServer interface {
	mustEmbedUnimplementedSubmitResultServiceServer()
}

func RegisterSubmitResultServiceServer(s grpc.ServiceRegistrar, srv SubmitResultServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubmitResultServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubmitResultService_ServiceDesc, srv)
}

func _SubmitResultService_MapResultRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitResultServiceServer).MapResultRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmitResultService_MapResultRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitResultServiceServer).MapResultRPC(ctx, req.(*MapResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmitResultService_ReduceResultRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmitResultServiceServer).ReduceResultRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmitResultService_ReduceResultRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmitResultServiceServer).ReduceResultRPC(ctx, req.(*ReduceResult))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmitResultService_ServiceDesc is the grpc.ServiceDesc for SubmitResultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmitResultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mapreduce.SubmitResultService",
	HandlerType: (*SubmitResultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapResultRPC",
			Handler:    _SubmitResultService_MapResultRPC_Handler,
		},
		{
			MethodName: "ReduceResultRPC",
			Handler:    _SubmitResultService_ReduceResultRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/mapreduce.proto",
}
