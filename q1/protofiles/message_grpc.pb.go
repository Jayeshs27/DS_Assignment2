// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protofiles/message.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackendService_BackendRPC_FullMethodName = "/message.BackendService/BackendRPC"
)

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	BackendRPC(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (*BackendResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) BackendRPC(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (*BackendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackendResponse)
	err := c.cc.Invoke(ctx, BackendService_BackendRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility.
type BackendServiceServer interface {
	BackendRPC(context.Context, *BackendRequest) (*BackendResponse, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackendServiceServer struct{}

func (UnimplementedBackendServiceServer) BackendRPC(context.Context, *BackendRequest) (*BackendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackendRPC not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}
func (UnimplementedBackendServiceServer) testEmbeddedByValue()                        {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	// If the following call pancis, it indicates UnimplementedBackendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_BackendRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).BackendRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_BackendRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).BackendRPC(ctx, req.(*BackendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BackendRPC",
			Handler:    _BackendService_BackendRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/message.proto",
}

const (
	LoadBalancingService_LoadBalancerRPC_FullMethodName = "/message.LoadBalancingService/LoadBalancerRPC"
)

// LoadBalancingServiceClient is the client API for LoadBalancingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadBalancingServiceClient interface {
	LoadBalancerRPC(ctx context.Context, in *LoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancerResponse, error)
}

type loadBalancingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadBalancingServiceClient(cc grpc.ClientConnInterface) LoadBalancingServiceClient {
	return &loadBalancingServiceClient{cc}
}

func (c *loadBalancingServiceClient) LoadBalancerRPC(ctx context.Context, in *LoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadBalancerResponse)
	err := c.cc.Invoke(ctx, LoadBalancingService_LoadBalancerRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancingServiceServer is the server API for LoadBalancingService service.
// All implementations must embed UnimplementedLoadBalancingServiceServer
// for forward compatibility.
type LoadBalancingServiceServer interface {
	LoadBalancerRPC(context.Context, *LoadBalancerRequest) (*LoadBalancerResponse, error)
	mustEmbedUnimplementedLoadBalancingServiceServer()
}

// UnimplementedLoadBalancingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadBalancingServiceServer struct{}

func (UnimplementedLoadBalancingServiceServer) LoadBalancerRPC(context.Context, *LoadBalancerRequest) (*LoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBalancerRPC not implemented")
}
func (UnimplementedLoadBalancingServiceServer) mustEmbedUnimplementedLoadBalancingServiceServer() {}
func (UnimplementedLoadBalancingServiceServer) testEmbeddedByValue()                              {}

// UnsafeLoadBalancingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadBalancingServiceServer will
// result in compilation errors.
type UnsafeLoadBalancingServiceServer interface {
	mustEmbedUnimplementedLoadBalancingServiceServer()
}

func RegisterLoadBalancingServiceServer(s grpc.ServiceRegistrar, srv LoadBalancingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoadBalancingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadBalancingService_ServiceDesc, srv)
}

func _LoadBalancingService_LoadBalancerRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancingServiceServer).LoadBalancerRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancingService_LoadBalancerRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancingServiceServer).LoadBalancerRPC(ctx, req.(*LoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadBalancingService_ServiceDesc is the grpc.ServiceDesc for LoadBalancingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadBalancingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.LoadBalancingService",
	HandlerType: (*LoadBalancingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadBalancerRPC",
			Handler:    _LoadBalancingService_LoadBalancerRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/message.proto",
}
